#!/usr/bin/env ruby

# This file is based heavily on Capistrano's `capify` command

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

unless ARGV.empty?
  if !File.exists?(ARGV.first)
    abort "`#{ARGV.first}' does not exist."
  elsif !File.directory?(ARGV.first)
    abort "`#{ARGV.first}' is not a directory."
  elsif ARGV.length > 1
    abort "Too many arguments; please specify only the directory to wheneverize."
  end
end

content = <<-FILE

# Run all Sidekiq::Worker classes using Sidekiq::Recurrence
run_sidekiq_workers

FILE

file = 'config/schedule.rb'
base = ARGV.empty? ? '.' : ARGV.shift

file = File.join(base, file)
if File.exists?(file)
  warn "[skip] `#{file}' already exists"
elsif File.exists?(file.downcase)
  warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
elsif !File.exists?(File.dirname(file))
  warn "[skip] directory `#{File.dirname(file)}' does not exist"
else
  puts "[add] writing `#{file}'"
  File.open(file, "w") { |f| f.write(content) }
end

puts "[done] wheneverized!"
